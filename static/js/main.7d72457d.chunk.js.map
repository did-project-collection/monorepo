{"version":3,"sources":["App.jsx","helpers/loadAppContracts.js","hooks/useContractConfig.js","reportWebVitals.js","index.jsx"],"names":["MetaMaskOnboarding","isMetaMaskInstalled","App","useState","data","setData","config","useContractConfig","provider","setProvider","providerAndSigner","useUserProviderAndSigner","contracts","useContractLoader","signer","useEffect","a","ethers","providers","Web3Provider","window","ethereum","request","method","loadProvider","encryptData","cleartext","accounts","params","encryptionKeyDisplay","cyphertext","stringifiableToHex","encrypt","decryptData","value","utils","hexlify","Buffer","from","JSON","stringify","uploadToIPFS","file","version","client","create","URL","add","cid","console","log","path","createPIN","alert","dataToUpload","NFTManager","error","getPIN","get","tokenID","tokenURI","fetch","res","json","response","userData","deletePIN","remove","className","onChange","e","target","required","onClick","contractListPromise","loadAppContracts","default","deployedContracts","contractsConfig","setContractsConfig","result","loadFunc","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7d72457d.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport MetaMaskOnboarding from '@metamask/onboarding';\n// eslint-disable-next-line camelcase\nimport {\n  encrypt,\n  recoverPersonalSignature,\n  recoverTypedSignatureLegacy,\n  recoverTypedSignature,\n  recoverTypedSignature_v4 as recoverTypedSignatureV4,\n} from 'eth-sig-util';\nimport { ethers } from 'ethers';\nimport { toChecksumAddress } from 'ethereumjs-util';\nimport { signTypedData } from 'eth-sig-util';\nimport { create } from 'ipfs-http-client'\nimport { useContractLoader, useUserProviderAndSigner } from 'eth-hooks';\nimport { useContractConfig } from './hooks/useContractConfig';\nconst { isMetaMaskInstalled } = MetaMaskOnboarding;\n\nfunction App() {\n  const [ data, setData ] = useState(\"\");\n  const chainId = 4;\n  const config = useContractConfig();\n  const [ provider, setProvider ] = useState();\n  const providerAndSigner = useUserProviderAndSigner(provider)\n  const contracts = useContractLoader(providerAndSigner.signer, config, chainId);\n\n  useEffect( () => {\n    const loadProvider = async() => {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const userAccount = await window.ethereum.request({ method: 'eth_requestAccounts' });\n      setProvider(provider);\n    }\n    loadProvider();\n  }, []);\n\n  const encryptData = async(cleartext) => {\n    const accounts = await window.ethereum.request({\n      method: 'eth_accounts',\n    });\n\n    const encryptionKeyDisplay = await window.ethereum.request({\n      method: 'eth_getEncryptionPublicKey',\n      params: [accounts[0]],\n    });\n\n    const cyphertext = stringifiableToHex(\n      encrypt(\n        encryptionKeyDisplay,\n        { data: cleartext },\n        'x25519-xsalsa20-poly1305',\n      ),\n    );\n\n    return cyphertext;\n  }\n\n  const decryptData = async(cyphertext) => {\n    const accounts = await window.ethereum.request({\n      method: 'eth_accounts',\n    });\n\n    const cleartext = await window.ethereum.request({\n      method: 'eth_decrypt',\n      params: [cyphertext, accounts[0]],\n    });\n\n    return cleartext;\n  }\n\n  const stringifiableToHex = (value) => {\n    return ethers.utils.hexlify(Buffer.from(JSON.stringify(value)));\n  }\n\n  const uploadToIPFS = async (data) => {\n    const file = JSON.stringify({data: data, version: \"v1\"});\n    const client = create(new URL('https://ipfs.infura.io:5001/api/v0'));\n    const cid = await client.add(file);\n    console.log(\"[uploadToIPFS] cid\", cid.path);\n\n    return cid.path;\n  }\n\n  const createPIN = async() => {\n    console.log(\"createPIN\");\n\n    if(data == \"\") {\n      alert(\"Empty!\");\n      return;\n    }\n\n    try {\n      console.log(\"Encrypting...\");\n      const dataToUpload = await encryptData(data);\n      console.log(\"Uploading...\");\n      const cid = await uploadToIPFS(dataToUpload);\n      console.log(\"Minting...\");\n      await contracts.NFTManager.create(cid);\n      console.log(\"...OK\");\n\n      setData(\"Token created with data:\" + data);\n    } catch(e) {\n      console.log(\"...FAIL\");\n      console.error(e);\n      alert(\"Error occurred\");\n    }\n  }\n\n  const getPIN = async() => {\n    try {\n      const tokenID = await contracts.NFTManager.get();\n      const cid = await contracts.NFTManager.tokenURI(tokenID);\n      const res = await fetch(`https://ipfs.io/ipfs/${cid}`);\n      const response = await res.json();\n      const userData = await decryptData(response.data);\n      setData(\"Token was read and contains data: \" + userData);\n    } catch(e) {\n      console.log(\"...FAIL\");\n      console.error(e);\n      alert(\"Error occurred\");\n    }\n  }\n\n  const deletePIN = async() => {\n    try {\n      console.log(\"Deleting...\");\n      await contracts.NFTManager.remove();\n      console.log(\"...OK\");\n      setData(\"Token was deleted\");\n    } catch(e) {\n      console.log(\"...FAIL\");\n      console.error(e);\n      alert(\"Error!\");\n    }\n  }\n\n  return (\n    <div className=\"text-center\">\n      <span className=\"form-signin\">\n        <h1 className=\"h3 mb-3 font-weight-normal\">KYC data to encrypt</h1>\n        <textarea className=\"form-control\" onChange={e => setData(e.target.value)} value={data} required>Email address</textarea>\n        <br />\n        <button className=\"btn btn-lg btn-primary btn-block\" onClick={() => createPIN()}>Create Personal Identity NFT</button>\n        <button className=\"btn btn-lg btn-success btn-block\" onClick={() => getPIN()}>Read Personal Identity NFT</button>\n        <button className=\"btn btn-lg btn-danger btn-block\" onClick={() => deletePIN()}>Delete Personal Identity NFT</button>\n        <p className=\"mt-5 mb-3 text-muted\">Personal Identity Token</p>\n      </span>\n    </div>\n  );\n}\n\nexport default App;\n","const contractListPromise = import(\"../abi/nft.json\");\n\nexport const loadAppContracts = async () => {\n  const config = {};\n  config.deployedContracts = (await contractListPromise).default ?? {};\n  return config;\n};\n","import { useState, useEffect } from \"react\";\nimport { loadAppContracts } from \"../helpers/loadAppContracts\";\n\nexport const useContractConfig = () => {\n  const [contractsConfig, setContractsConfig] = useState({});\n\n  useEffect(() => {\n    const loadFunc = async () => {\n      const result = await loadAppContracts();\n      setContractsConfig(result);\n    };\n    void loadFunc();\n  }, []);\n  return contractsConfig;\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}